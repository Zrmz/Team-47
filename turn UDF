def turn(angle):
    from __future__ import print_function # use python 3 syntax but make it compatible with python 2
    from __future__ import division       #                           ''
    import time     # import the time library for the sleep function
    import brickpi3 # import the BrickPi3 drivers

    BP = brickpi3.BrickPi3() # Create an instance of the BrickPi3 class. BP will be the BrickPi3 object.
    
    LEFT = BP.PORT_D
    RIGHT = BP.PORT_A
    FACTOR = 1.8 #(Theoretically 1.67, but likely higher, between 1.8 and 2.0)
    
    zeroLeft = BP.get_motor_encoder(Left)
    zeroRight = BP.get_motor_encoder(Right)
    
    #Turning option 1 (constant power)
    BP.offset_motor_encoder(LEFT, zeroLeft)
    BP.offset_motor_encoder(RIGHT, zeroRight)
    BP.set_motor_position(LEFT, FACTOR * angle)
    BP.set_motor_position(RIGHT, -1 * FACTOR * angle)
    
    #turning option 2 (constant time, adjustable speed)
    BP.set_motor_dps(LEFT, 0)
    BP.set_motor_dps(RIGHT, 0)
    time.sleep(0.5)
    BP.set_motor_dps(LEFT, FACTOR * angle)
    BP.set_motor_dps(RIGHT, -1 * FACTOR * angle)
    time.sleep(1)
    BP.set_motor_dps(LEFT, 0)
    BP.set_motor_dps(RIGHT, 0)
    
    #turning option 3 (constant adjustable speed)
    BP.set_motor_dps(LEFT, 0)
    BP.set_motor_dps(RIGHT, 0)
    time.sleep(0.5)
    BP.set_motor_dps(LEFT, 180 * angle / abs(angle)) #the 180 is the speed in DPS. Feel free to adjust it.
    BP.set_motor_dps(RIGHT, -180 * angle / abs(angle)) # ^ same as there.
    time.sleep(FACTOR * abs(angle) / 180) #DO NOT ADJUST THIS 180. It represents half a circle and should not be violated.
    BP.set_motor_dps(LEFT, 0)
    BP.set_motor_dps(RIGHT, 0)
    
    return

angle = float(input("Enter the angle in degrees for the robot to turn to"))
turn(angle)


#Proportional turning code:

def turn(angle):
    
    LEFT = BP.PORT_D
    RIGHT = BP.PORT_A
    GYRO_PORT = BP.PORT_1

    current_angle = BP.get_sensor(GYRO_PORT)
    desired_angle = current_angle + angle
    
    GAIN = 2
    timer = 0
    
    BP.set_motor_dps(LEFT, 0)
    BP.set_motor_dps(RIGHT, 0)
    time.sleep(0.5)
    
    #keeps turning until two seconds have passed AND the angle is accurate to within 1 degree
    while (abs(current_angle - desired_angle) > 1) or (timer < 2): 
    #timer is in seconds and represents the minimum time to come to a stop
        
        current_angle = BP.get_sensor(GYRO_PORT)
        BP.set_motor_dps(LEFT, GAIN * (current_angle - angle))
        BP.set_motor_dps(RIGHT, GAIN * (angle - current_angle))
        time.sleep(.1)
        timer += .1
    
    BP.set_motor_dps(LEFT, 0)
    BP.set_motor_dps(RIGHT, 0)
    
    return

angle = float(input("Enter the angle in degrees for the robot to turn to"))
turn(angle)
